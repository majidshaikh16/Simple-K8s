node {
    

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    // stage('Mapping maven volumes'){
    //     docker.image('maven:alpine').inside('-v $HOME/.m2:/root/.m2'){ c->
    //         sh 'echo "mounted maven volume..."'
    //     }
    // }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        def dockerfile = 'Dockerfile'
        // sh 'docker build -t majidshaikh16/simple-web -f ./SimpleWeb/${dockerfile} ./SimpleWeb/'
        app = docker.build("majidshaikh16/simple-web","-f ./SimpleWeb/${dockerfile} ./SimpleWeb/")
    }

    // stage('Test image') {
    //     /* Ideally, we would run a test framework against our image.
    //      * For this example, we're using a Volkswagen-type approach ;-) */

    //     app.inside {
    //         sh 'echo "All Tests cases passed"'
    //     }
    // }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        // docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-creds') {
        //     // app.push("${env.BUILD_NUMBER}")
        //     // sh 'docker push majidshaikh16/simple-web'
        //     app.push("majidshaikh16/simple-web")
        //     app.push("latest")
        //     sh 'echo "pushed to docker hub..."'
        // }
        sh 'docker login'
        sh 'docker push majidshaikh16/simple-web'
    }
}